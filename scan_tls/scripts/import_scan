#!/usr/bin/python3

import sys
import os
import psycopg2
import json
from urllib.parse import urlparse

target = sys.argv[1]

#Establishing the connection
conn = psycopg2.connect(os.environ['PGTT_URL'])
#    host = os.environ['POSTGRES_HOST'],
#    database = os.environ['POSTGRES_DB'],
#    port = os.environ['POSTGRES_PORT'],
#    user = os.environ['POSTGRES_USER'],
#    password = os.environ['POSTGRES_PASSWORD']
# )
conn.autocommit = True
cursor = conn.cursor()

# add_ip = '''INSERT into ips (ip) VALUES ( %s ) ON CONFLICT DO NOTHING'''
# cursor.execute(add_ip, (ip,))

#Add scan
scan_id = None
scan_name = 'manual scan on: ' + target
add_scan = '''INSERT into scans (name)
              VALUES (%s) ON CONFLICT ON CONSTRAINT scans_name_unique DO UPDATE
              SET date_updated= NOW()
              RETURNING id'''
cursor.execute(add_scan, (scan_name,))
scan_id = cursor.fetchone()[0]

print("scanid is", scan_id)

# update_ips = '''UPDATE ips
#                         SET status = %s, date_updated= NOW()
#                         WHERE ip = %s'''

# status = "active"
# cursor.execute(update_ips, (status,target))
# print("Active ip:",target)

#Processs ports JSON /results/$target/testssl.json
results_file = '/results/' + target + '/testssl.json'
#Processs JSON
with open(results_file) as file:
  file_contents = file.read()
  
parsed_json = json.loads(file_contents)

ip = parsed_json['scanResult'][0]['ip']
hostname = parsed_json['scanResult'][0]['targetHost']
port = parsed_json['scanResult'][0]['port']
vulnerabilities = parsed_json['scanResult'][0]['vulnerabilities']
protocols = parsed_json['scanResult'][0]['protocols']
ciphers = parsed_json['scanResult'][0]['ciphers']

vuln_summary = "SSL/TLS vulnerabilties"
prot_summary = 'Insecure protocols'
ciph_summary = 'Insecure ciphers' #TBD

vuln_sev = 1
prot_sev = 1
ciph_sev = 1

vuln_info = ''
vuln_info += '<table>'
vuln_info += '<tr><th>Vuln</th><th>Severity</th><th>Finding</th></tr>'
for info in vulnerabilities:
    vuln_info += '<tr>'
    vuln_info += '<td>' + info['id'] + '</td>'
    vuln_info += '<td>' + info['severity'] + '</td>'
    vuln_info += '<td>' + info['finding'] + '</td>'
    vuln_info += '</tr>'
#find highest severity and set it for vuln level
    if info['severity'] == 'LOW' and vuln_sev == 1:
        vuln_sev = 2 
    if info['severity'] == 'MEDIUM' and (vuln_sev == 1 or vuln_sev == 2):
        vuln_sev = 3
    if info['severity'] == 'HIGH' and (vuln_sev == 1 or vuln_sev == 2 or vuln_sev == 3):
        vuln_sev = 4
vuln_info += '</table>'

prot_info = 'Insecure protocols detected'
for info in protocols:
    if info['severity'] not in ['OK', 'INFO']:
        prot_info += '- ' + info['id'] + ' ' + info['finding']
        if info['severity'] == 'LOW' and prot_sev == 1:
            prot_sev = 2 
        if info['severity'] == 'MEDIUM' and (prot_sev == 1 or prot_sev == 2):
            prot_sev = 3
        if info['severity'] == 'HIGH' and (prot_sev == 1 or prot_sev == 2 or prot_sev == 3):
            prot_sev = 4


status_ip = "inactive"
add_ips = '''INSERT INTO ips (ip,scan_id,status) VALUES (%s,%s,%s)'''
add_ports = '''INSERT INTO ports (port,scan_id) VALUES (%s,%s)'''
# update_domain_ips = '''INSERT INTO domains_ips (domain_id, ip_id) 
#                 VALUES (
#                     (SELECT id from domains where domain= %s ),
#                     (SELECT id from ips where ip= %s )
#                 )'''
# update_domain_ports = '''INSERT INTO domains_ports (domain_id, port_id) 
#                 VALUES (
#                     (SELECT id from domains where domain= %s ),
#                     (SELECT id from ports where port= %s )
#                 )'''
update_hostname_ips = '''INSERT INTO hosts_ips (hostname_id, ip_id) 
                VALUES (
                    (SELECT id from hosts where hostname= %s LIMIT 1 ),
                    (SELECT min(id) from ips where ip= %s )
                )'''
update_hostname_ports = '''INSERT INTO hosts_ports (hostname_id, port_id) 
                VALUES (
                    (SELECT id from hosts where hostname= %s LIMIT 1),
                    (SELECT id from ports where port= %s LIMIT 1)
                )'''
update_ips_ports = '''INSERT INTO ips_ports (ip_id, port_id) 
                VALUES (
                    (SELECT id from ips where ip= %s ),
                    (SELECT id from ports where port= %s )
                )'''

if hostname == ip:
    add_vulns = '''INSERT INTO vulnerabilities (ip_id, port_id, summary, vuln_sev, vuln_info) 
                VALUES (
                    (SELECT min(id) from ips where ip= %s ),
                    (SELECT id from ports where port= %s LIMIT 1 ),
                    %s,%s,%s
                ) ON CONFLICT ON CONSTRAINT vulnerabilities_unique DO UPDATE
                SET summary = EXCLUDED.summary, date_updated= NOW() RETURNING id'''
else:
    add_vulns = '''INSERT INTO vulnerabilities (hostname_id, ip_id, port_id, summary, vuln_sev, vuln_info) 
                    VALUES (
                        (SELECT id from hosts where hostname= %s ),
                        (SELECT min(id) from ips where ip= %s ),
                        (SELECT id from ports where port= %s LIMIT 1 ),
                        %s,%s,%s
                    ) ON CONFLICT ON CONSTRAINT vulnerabilities_unique DO UPDATE
                    SET summary = EXCLUDED.summary, date_updated= NOW() RETURNING id'''

update_scans_vulns = '''INSERT INTO scans_vulnerabilities (scan_id, vulnerability_id) VALUES (%s,%s)'''

try:
    cursor.execute(add_ips, (ip,scan_id,status_ip))
except Exception as err:
    conn.rollback()
    print("ERROR add ip",ip)

try:
    cursor.execute(add_ports, (port,scan_id))
except Exception as err:
    conn.rollback()
    print("ERROR add port",port)

if hostname != ip:
    try:
        cursor.execute(update_hostname_ips, (hostname,ip))
        print("hostname/ip",hostname,ip)
    except Exception as err:
        conn.rollback()
        print("hostname ERROR",hostname)
    try:
        cursor.execute(update_hostname_ports, (hostname,port))
        print("hostname/port",hostname,port)
    except Exception as err:
        conn.rollback()
        print("hostname ERROR",hostname)

if hostname == ip:
    try:
        cursor.execute(add_vulns, (ip,port,vuln_summary,vuln_sev,vuln_info))
        vuln_id = cursor.fetchone()[0]
        print("ADDED vuln_id:",vuln_id)
        cursor.execute(update_scans_vulns, (scan_id,vuln_id))
    except Exception as err:
        conn.rollback()
        print("VULNS ERROR",ip)

    try:
        cursor.execute(add_vulns, (ip,port,prot_summary,prot_sev,prot_info))
        vuln_id = cursor.fetchone()[0]
        print("ADDED vuln_id:",vuln_id)
        cursor.execute(update_scans_vulns, (scan_id,vuln_id))
    except Exception as err:
        conn.rollback()
        print("VULNS ERROR",ip)

else:
    try:
        cursor.execute(add_vulns, (hostname,ip,port,vuln_summary,vuln_sev,vuln_info))
        vuln_id = cursor.fetchone()[0]
        print("ADDED vuln_id:",vuln_id)
        cursor.execute(update_scans_vulns, (scan_id,vuln_id))
    except Exception as err:
        conn.rollback()
        print("VULNS ERROR",ip)

    try:
        cursor.execute(add_vulns, (hostname,ip,port,prot_summary,prot_sev,prot_info))
        vuln_id = cursor.fetchone()[0]
        print("ADDED vuln_id:",vuln_id)
        cursor.execute(update_scans_vulns, (scan_id,vuln_id))
    except Exception as err:
        conn.rollback()
        print("VULNS ERROR",ip)

file.close()

conn.close()
