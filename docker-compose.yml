services:

  caddy-proxy-waf:
    image: ghcr.io/altersec/caddy-proxy-waf:latest
    container_name: caddy-proxy-waf
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}
      BACKEND: ${BACKEND:-http://api:8055}
    volumes:
      - caddy_data:/data
    networks:
      - proxy

  api:
    image: ghcr.io/ciso360ai/api:latest
    build:
      context: ./api/.
    container_name: api
    restart: always
    depends_on:
      cache:
        condition: service_healthy
      scan_tls:
        condition: service_healthy
    ports:
      - "8055:8055"
    env_file:
      - .env
    environment:
      TELEMETRY: "false"
      # LOGGER_HTTP_USE_LEVEL="silent" # DO NOT log api logs
      DB_CLIENT: "pg"
      DB_CONNECTION_STRING: "postgres://${PG1_USER:-root}:${PG1_PASS}@${PG1_HOST:-postgres}:5432/${PG1_DB}?sslmode=require"
      DB_SEARCH_PATH: public,timetable
      CACHE_ENABLED: "true"
      CACHE_AUTO_PURGE: "true"
      CACHE_STORE: "redis"
      REDIS: "redis://cache:6379"
    volumes:
      - ./api/extensions:/directus/extensions
      - ./api/migrations:/directus/migrations
      - ./api/uploads:/directus/uploads
      - ./results:/results
    networks:
      - db
      - proxy
      - internal

  cache:
    image: redis:7-alpine
    container_name: cache
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    networks:
      - db

  scan_tls:
    image: ghcr.io/ciso360ai/scan_tls:latest
    build:
      context: ./scan_tls/.
    container_name: scan_tls
    hostname: scan_tls
    restart: always
    healthcheck:
      # test: ["CMD-SHELL", "curl -f http://localhost:8008/readiness || exit 1"]
      test: ["CMD-SHELL", "exit 0"]
      timeout: 1s
      interval: 1s
      retries: 5
    environment:
      PGTT_URL: "postgres://${PG1_USER:-root}:${PG1_PASS}@${PG1_HOST:-postgres}:5432/${PG1_DB}?sslmode=require"
      SERVER_NAME: ${SERVER_NAME:-localhost}
      USER_AGENT: ${USER_AGENT} #TBD
      TIMEOUT_SHORT: ${TIMEOUT_SHORT:-270}
      TIMEOUT_LONG: ${TIMEOUT_LONG:-600}
    # command: ["--cron-workers=4"]
    volumes:
      - ./results:/results
      - ./logs:/logs
      - ./scan_tls/scripts/scan_tls:/usr/local/bin/scan_tls
      - ./scan_tls/scripts/import_scan:/usr/local/bin/import_scan
    networks:
      - internal

  scan_domain:
    image: ghcr.io/ciso360ai/scan_domain:latest
    build:
      context: ./scan_domain/.
    container_name: scan_domain
    hostname: scan_domain
    restart: always
    depends_on:
      scan_tls:
        condition: service_healthy
    healthcheck:
      # test: ["CMD-SHELL", "curl -f http://localhost:8008/readiness || exit 1"]
      test: ["CMD-SHELL", "exit 0"]
      timeout: 1s
      interval: 1s
      retries: 5
    environment:
      PGTT_URL: "postgres://${PG1_USER:-root}:${PG1_PASS}@${PG1_HOST:-postgres}:5432/${PG1_DB}?sslmode=require"
      SERVER_NAME: ${SERVER_NAME:-localhost}
      USER_AGENT: ${USER_AGENT} #TBD
      TIMEOUT_SHORT: ${TIMEOUT_SHORT:-270}
      TIMEOUT_LONG: ${TIMEOUT_LONG:-600}
    # command: ["--cron-workers=4"]
    volumes:
      - ./results:/results
      - ./logs:/logs
      - ./scan_domain/scripts/scan_domain:/usr/local/bin/scan_domain
      - ./scan_domain/scripts/import_scan:/usr/local/bin/import_scan
      - ./scan_domain/config:/scan_domain/config
    networks:
      - internal

  scan_email:
    image: ghcr.io/ciso360ai/scan_email:latest
    build:
      context: ./scan_email/.
    container_name: scan_email
    hostname: scan_email
    restart: always
    depends_on:
      scan_tls:
        condition: service_healthy
    healthcheck:
      # test: ["CMD-SHELL", "curl -f http://localhost:8008/readiness || exit 1"]
      test: ["CMD-SHELL", "exit 0"]
      timeout: 1s
      interval: 1s
      retries: 5
    environment:
      PGTT_URL: "postgres://${PG1_USER:-root}:${PG1_PASS}@${PG1_HOST:-postgres}:5432/${PG1_DB}?sslmode=require"
      SERVER_NAME: ${SERVER_NAME:-localhost}
      USER_AGENT: ${USER_AGENT}
      HIBP_API_KEY: ${HIBP_API_KEY}
      PYTHONUNBUFFERED: 1
    # command: ["--cron-workers=4"]
    volumes:
      - ./results:/results
      - ./logs:/logs
      - ./scan_email/scripts/scan_domain_hibp:/usr/local/bin/scan_domain_hibp
      - ./scan_email/scripts/scan_email_hibp:/usr/local/bin/scan_email_hibp
      - ./scan_email/config:/scan_domain/config
    networks:
      - internal

networks:
  proxy:
  db:
  internal:

volumes:
  caddy_data:
    driver: local
